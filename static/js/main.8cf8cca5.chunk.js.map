{"version":3,"sources":["components/AddOffer.js","components/MainTable.js","App.js","serviceWorker.js","index.js"],"names":["AddOffer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","firmList","JSON","parse","localStorage","getItem","handleChange","e","console","log","target","name","type","setState","defineProperty","value","handleSubmit","preventDefault","data","objectSpread","state","writeFirm","firm","address","phone","email","www","jobAdvertisement","jobAdvertisementLink","queryDate","CVDate","notices","react_default","a","createElement","className","onSubmit","onChange","placeholder","Component","MainTable","text","map","offer","i","key","App","formActive","handleButton","push","setItem","stringify","onClick","components_AddOffer","components_MainTable","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8cf8cca5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./addOffer.css\";\r\n\r\nclass AddOffer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      firm: \"\",\r\n      address: \"\",\r\n      phone: \"\",\r\n      email: \"\",\r\n      www: \"\",\r\n      jobAdvertisement: \"\",\r\n      jobAdvertisementLink: \"\",\r\n      queryDate: \"\",\r\n      CVDate: \"\",\r\n      notices: \"\"\r\n    };\r\n  }\r\n\r\n  firmList = JSON.parse(localStorage.getItem(\"savedFirmList\")) || [];\r\n\r\n  handleChange = e => {\r\n    console.log(e.target.name);\r\n    if (e.target.type === \"textarea\") {\r\n      this.setState({\r\n        [e.target.name]: e.target.value\r\n      });\r\n    } else {\r\n      this.setState({\r\n        [e.target.name]: e.target.value\r\n      });\r\n    }\r\n  };\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const data = { ...this.state };\r\n    this.props.writeFirm(data);\r\n    // this.firmList.push(data);\r\n    // console.log(this.firmList);\r\n    // localStorage.setItem(\"savedFirmList\", JSON.stringify(this.firmList));\r\n\r\n    this.setState({\r\n      firm: \"\",\r\n      address: \"\",\r\n      phone: \"\",\r\n      email: \"\",\r\n      www: \"\",\r\n      jobAdvertisement: \"\",\r\n      jobAdvertisementLink: \"\",\r\n      queryDate: \"\",\r\n      CVDate: \"\",\r\n      notices: \"\"\r\n    });\r\n  };\r\n\r\n  render() {\r\n    // console.log(this.props);\r\n    return (\r\n      <form className=\"add_firm\" onSubmit={this.handleSubmit}>\r\n        <label>\r\n          Podaj nazwę firmy{\" \"}\r\n          <input\r\n            name=\"firm\"\r\n            value={this.state.firm}\r\n            onChange={this.handleChange}\r\n            type=\"text\"\r\n            placeholder=\"Nazwa Firmy\"\r\n          />\r\n        </label>{\" \"}\r\n        <label>\r\n          Podaj adres{\" \"}\r\n          <input\r\n            name=\"address\"\r\n            value={this.state.address}\r\n            onChange={this.handleChange}\r\n            type=\"text\"\r\n            placeholder=\"Adres\"\r\n          />\r\n        </label>{\" \"}\r\n        <label>\r\n          Podaj telefon{\" \"}\r\n          <input\r\n            name=\"phone\"\r\n            value={this.state.phone}\r\n            onChange={this.handleChange}\r\n            type=\"text\"\r\n            placeholder=\"Telefon\"\r\n          />\r\n        </label>{\" \"}\r\n        <label>\r\n          Podaj e - mail{\" \"}\r\n          <input\r\n            name=\"email\"\r\n            value={this.state.email}\r\n            onChange={this.handleChange}\r\n            type=\"text\"\r\n            placeholder=\"email\"\r\n          />\r\n        </label>{\" \"}\r\n        <label>\r\n          Podaj stronę www{\" \"}\r\n          <input\r\n            name=\"www\"\r\n            value={this.state.www}\r\n            onChange={this.handleChange}\r\n            type=\"text\"\r\n            placeholder=\"Strona internetowa\"\r\n          />\r\n        </label>{\" \"}\r\n        <label>\r\n          Podaj treść ogłoszenia{\" \"}\r\n          <textarea\r\n            name=\"jobAdvertisement\"\r\n            value={this.state.jobAdvertisement}\r\n            onChange={this.handleChange}\r\n          />{\" \"}\r\n        </label>{\" \"}\r\n        <label>\r\n          Podaj link do ogłoszenia{\" \"}\r\n          <input\r\n            name=\"jobAdvertisementLink\"\r\n            value={this.state.jobAdvertisementLink}\r\n            onChange={this.handleChange}\r\n            type=\"text\"\r\n            placeholder=\"Strona internetowa\"\r\n          />\r\n        </label>{\" \"}\r\n        <label>\r\n          Data wysłania zapytania{\" \"}\r\n          <input\r\n            name=\"queryDate\"\r\n            value={this.state.queryDate}\r\n            onChange={this.handleChange}\r\n            type=\"Date\"\r\n          />\r\n        </label>{\" \"}\r\n        <label>\r\n          Data wysłania CV{\" \"}\r\n          <input\r\n            name=\"CVDate\"\r\n            value={this.state.CVDate}\r\n            onChange={this.handleChange}\r\n            type=\"Date\"\r\n          />\r\n        </label>\r\n        <label>\r\n          Uwagi\r\n          <textarea\r\n            name=\"notices\"\r\n            value={this.state.notices}\r\n            onChange={this.handleChange}\r\n          />{\" \"}\r\n        </label>{\" \"}\r\n        <button type=\"submit\"> Dodaj firmę </button>{\" \"}\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddOffer;\r\n","import React, { Component } from \"react\";\r\n\r\nclass MainTable extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      text: props.text\r\n    };\r\n  }\r\n\r\n  render() {\r\n    console.log(this.props.data);\r\n    const data = this.props.data.map((offer, i) => (\r\n      <li key={i}>{offer.firm}</li>\r\n    ));\r\n    return (\r\n      <div>\r\n        <h2>Lista ofert</h2>\r\n        <ul>{data}</ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainTable;\r\n","import React, { Component } from \"react\";\n\nimport \"./App.css\";\nimport AddOffer from \"./components/AddOffer\";\nimport MainTable from \"./components/MainTable\";\n\nclass App extends Component {\n  state = {\n    formActive: false\n  };\n\n  firmList = JSON.parse(localStorage.getItem(\"savedFirmList\")) || [];\n\n  handleButton = () => {\n    this.setState({\n      formActive: !this.state.formActive\n    });\n  };\n\n  writeFirm = data => {\n    this.firmList.push(data);\n    console.log(this.firmList);\n    localStorage.setItem(\"savedFirmList\", JSON.stringify(this.firmList));\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <button onClick={this.handleButton}>Pokaż/Ukryj Formularz </button>\n        {this.state.formActive && <AddOffer writeFirm={this.writeFirm} />}\n\n        <MainTable data={this.firmList} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}